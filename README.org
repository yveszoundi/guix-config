#+TITLE: README

This document describes my [[https://guix.gnu.org/][Gnu Guix System]] setup for a virtual machine installation ([[https://www.qemu.org/][QEMU]] for me).
- This is for a =UEFI= installation that can be performed remotely via SSH (easy copy/paste of notes, etc.)
- The installation uses [[https://btrfs.readthedocs.io/en/latest/][BTRFS]] instead of [[https://wikiless.org/wiki/Logical_Volume_Manager_(Linux)?lang=en][LVM]], with full disk encryption ([[https://wikiless.org/wiki/Linux_Unified_Key_Setup?lang=en][LUKS]])
- The core installation itself is minimal
  - The user specific software packages include [[https://swaywm.org/][Sway]] ([[https://i3wm.org/][i3]] for =Wayland=), [[https://librewolf.net/][Librewolf]]. See [[./home/user/src/guix-config/home-configuration.scm][home/user/src/guix-config/home-configuration.scm]]
  - =Sway= is configured with Ratpoison-like keybindings (=C-t= prefix)

My initial goal is to contribute to Open Source projects from a Guix environment.
- My main machine runs few dedicated virtual machines (VM) a la [[https://www.qubes-os.org/intro/][Qubes OS]] (=vault-vm=, =personal-vm=, =dev-vm=, etc.)
- =Gnu Guix System= would be dedicated to open source contributions

*Notes*:
- Configuration files of this repository are meant to remain simple for general guidance.
- You can fork this repository and customize further the set of software packages that you like on top other personal preferences.

* Enable remote installation

After booting the [[https://guix.gnu.org/en/download/][Gnu Guix System ISO image]], elect to drop into a shell after selecting your language and location.

Please start =SSH= and setup a non-blank root password.

#+begin_src sh
  herd start ssh-daemon
  passwd
#+end_src

* Prepare the installation

You can "ssh into" the Gnu Guix System installation: =ssh root@ip_here -p port_here=.

During new installations with =QEMU=, I typically [[https://serverfault.com/questions/704294/qemu-multiple-port-forwarding][forward port]] =22= to a fixed port number (e.g., =62000=).

For my personal setup, I'm using =ssh root@localhost -p 62000=.

** Create partitions
Identify your disk partitions (=fdisk -l= can help).

Create 2 partitions by running =cgdisk /dev/sda= (in my case)
- Setup the EFI partition (code =ef00=) of 300 MB (=/dev/sda1= in my case)
- Setup the Linux partition (default code) with the remaining disk space (=/dev/sda2= in my case)

=Write= changes to disk and then =Quit= the =cgdisk= interface.

** Create an encrypted device

Encrypt the main partition.

#+begin_src sh
  cryptsetup luksFormat --type luks1 /dev/sda2
#+end_src

** Open LUKS device

Open the encrypted device.

#+begin_src sh
  cryptsetup luksOpen /dev/sda2 guixvm
#+end_src

** Prepare installation

Run all the commands below to configure partitions and setup filesystems.

#+begin_src sh
  mkfs.btrfs -L guixroot /dev/mapper/guixvm

  mount -t btrfs /dev/mapper/guixvm /mnt

  btrfs subvolume create /mnt/root
  btrfs subvolume create /mnt/boot
  btrfs subvolume create /mnt/home
  btrfs subvolume create /mnt/gnu
  btrfs subvolume create /mnt/data
  btrfs subvolume create /mnt/log
  btrfs subvolume create /mnt/swap

  btrfs filesystem mkswapfile --size 4g /mnt/swap/swapfile
  btrfs subvolume snapshot -r /mnt/root /mnt/root-blank

  umount /mnt

  mount -o subvol=root /dev/mapper/guixvm /mnt
  mkdir -p /mnt/home /mnt/gnu /mnt/data /mnt/var/log /mnt/boot /mnt/swap
  mount -o subvol=home /dev/mapper/guixvm /mnt/home
  mount -o subvol=gnu  /dev/mapper/guixvm /mnt/gnu
  mount -o subvol=data /dev/mapper/guixvm /mnt/data
  mount -o subvol=log  /dev/mapper/guixvm /mnt/var/log
  mount -o subvol=boot /dev/mapper/guixvm /mnt/boot
  mount -o subvol=swap /dev/mapper/guixvm /mnt/swap

  mkfs.vfat /dev/sda1
  mkdir -p /mnt/boot/efi
  mount /dev/sda1 /mnt/boot/efi

  herd start cow-store /mnt
#+end_src

* Install the system

Edit the [[./etc/config.scm][etc/config.scm]] file as needed (i.e. =efi= and =root= partition names, timezone, keyboard layout).

You need to create the =config.scm= file inside your installation
- You can add/edit the file on your Guix installation locally or via SSH (with =nano=, =mg= or =vi=)
- Alternatively, you could also download the raw file from GitHub via =wget= or =curl=

#+begin_src sh
  mkdir -p /mnt/etc
  cp config.scm /mnt/etc/config.scm
  guix system init /mnt/etc/config.scm /mnt
#+end_src

You can now reboot into your new system (shutdown/start or reboot depending on your setup).

#+begin_src sh
  reboot
#+end_src

* Setup the new system

** Update passwords

Both passwords for the =root= and =user= users are initially empty.

Let's login as =root= and change that.

#+begin_src sh
  passwd
  passwd user
#+end_src

** Update the system

You can now continue the configuration process remotely (=ssh user@localhost -p 62000= in my case).

#+begin_src sh
  guix pull --timeout=800 --max-silent-time=800
  sudo guix system reconfigure /etc/config.scm
  reboot
#+end_src

** Fix the clock

Connect to the machine remotely (=ssh user@localhost -p 62000= in my case).

#+begin_src sh
  guix package -i ntp
  GUIX_PROFILE="$HOME/.guix-profile"
  . "$GUIX_PROFILE/etc/profile"
  sudo ntpdate -s time.nist.gov && sudo hwclock --systohc
  guix package -r ntp
#+end_src

** User environment setup

This will setup a minimal [[https://arewewaylandyet.com/][Wayland]] graphical environment with [[https://swaywm.org/][Sway]] (via [[https://guix.gnu.org/manual/devel/en/html_node/Home-Configuration.html][Guix home configuration management]]).
- It is assumed have you've pulled the contents of this =git= repository on your new Guix installation
- You'll then be able to quickly have a system up and running
 
*As a regular user* (=user= in my case), deploy [[./home/user/src/guix-config/home-configuration.scm][home/user/src/guix-config/home-configuration.scm]].

#+begin_src sh
  mkdir -p ~/Downloads ~/.config/guix
  cd ~/Downloads
  git clone https://github.com/yveszoundi/guix-config
  cp -rf guix-config/home/user/src ~/
  cp -rf guix-config/home/user/Pictures ~/
  guix home reconfigure ~/src/guix-config/home-configuration.scm
  cd -
#+end_src

After first login in the =tty=, type =sway= on the command-line to start the Wayland compositor.

* Additional notes
  
** Mullvad VPN on the host

If specifically using Mullvad VPN on the host machine, you might run into internet connectivity issues inside the Guix virtual machine. In such a case, create a file at =/etc/resolv.conf.head= with the line =nameserver 10.64.0.1=. See also [[https://mullvad.net/en/help/running-wireguard-router][running-wireguard-router]].
  
** QEMU parameters

If the UI doesn't start, the QEMU parameter =-vga qxl= seems to avoid issues with Wayland drivers/renderers.

* References

- https://guix.gnu.org/  
- https://packages.guix.gnu.org/
- https://guix.gnu.org/manual/en/html_node/Declaring-the-Home-Environment.html
- https://guix.gnu.org/manual/en/html_node/Essential-Home-Services.html
- https://git.sr.ht/~raghavgururajan/guix-config
- https://git.sr.ht/~boeg/home/tree/master/.config/guix/system/config.scm
- https://github.com/yenda/guix-config/blob/master/readme.org
- https://www.youtube.com/watch?v=XOYirIzUlW8


